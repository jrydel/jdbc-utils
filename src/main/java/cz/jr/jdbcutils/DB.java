package cz.jr.jdbcutils;

import javax.sql.DataSource;
import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.ArrayList;
import java.util.List;

/**
 * @author Jiří Rýdel
 * @created 2019/06/13
 */
public class DB {

    /**
     * Execute an SQL query with replacement parameters. The caller is responsible for closing the connection.
     * For a non-param query use an empty array -> new Object[]{}
     *
     * @param connection The connection to use to run the query.
     * @param sql        The query to execute.
     * @param params     The replacement parameters.
     * @return The number of rows updated.
     * @throws SQLException
     */
    public static int execute(Connection connection, String sql, Object[] params) throws SQLException {
        try (PreparedStatement statement = connection.prepareStatement(sql)) {
            initParams(statement, params);
            return statement.executeUpdate();
        }
    }

    /**
     * Execute an SQL query (INSERT, UPDATE, DELETE) with replacement parameters. The caller is responsible for closing the datasource.
     * For a non-param query use an empty array -> new Object[]{}
     *
     * @param dataSource The datasource to use to create the connection.
     * @param sql        The query to execute.
     * @param params     The replacement parameters.
     * @return The number of rows updated.
     * @throws SQLException
     */
    public static int execute(DataSource dataSource, String sql, Object[] params) throws SQLException {
        try (Connection connection = dataSource.getConnection()) {
            return execute(connection, sql, params);
        }
    }

    /**
     * Execute an SQL SELECT with replacement parameters. The caller is responsible for closing the datasource.
     * For a non-param query use an empty array -> new Object[]{}
     *
     * @param dataSource The datasource to use to create the connection.
     * @param sql        The query to execute.
     * @return An object generated by the handler.
     * @throws SQLException
     */
    public static <T> T select(DataSource dataSource, String sql, Object[] params, ResultSetHandler<T> handler) throws SQLException {
        try (Connection connection = dataSource.getConnection()) {
            return select(connection, sql, params, handler);
        }
    }

    /**
     * Execute an SQL SELECT with replacement parameters. The caller is responsible for closing the datasource.
     * For a non-param query use an empty array -> new Object[]{}
     *
     * @param connection The connection to use to run the query.
     * @param sql        The query to execute.
     * @return An object generated by the handler.
     * @throws SQLException
     */
    public static <T> T select(Connection connection, String sql, Object[] params, ResultSetHandler<T> handler) throws SQLException {
        try (PreparedStatement statement = connection.prepareStatement(sql)) {
            initParams(statement, params);
            try (ResultSet rs = statement.executeQuery()) {
                return handler.handle(rs);
            }
        }
    }

    /**
     * Execute an SQL SELECT with replacement parameters. The caller is responsible for closing the datasource.
     * For a non-param query use an empty array -> new Object[]{}
     *
     * @param dataSource The datasource to use to create the connection.
     * @param sql        The query to execute.
     * @return A List of objects generated by the handler.
     * @throws SQLException
     */
    public static <T> List<T> selectList(DataSource dataSource, String sql, Object[] params, ResultSetHandler<T> handler) throws SQLException {
        try (Connection connection = dataSource.getConnection()) {
            return selectList(connection, sql, params, handler);
        }
    }

    /**
     * Execute an SQL SELECT with replacement parameters. The caller is responsible for closing the datasource.
     * For a non-param query use an empty array -> new Object[]{}
     *
     * @param connection The connection to use to run the query.
     * @param sql        The query to execute.
     * @return A List of objects generated by the handler.
     * @throws SQLException
     */
    public static <T> List<T> selectList(Connection connection, String sql, Object[] params, ResultSetHandler<T> handler) throws SQLException {
        return select(connection, sql, params, rs -> {
            List<T> result = new ArrayList<>();
            while (rs.next()) {
                T entity = handler.handle(rs);
                result.add(entity);
            }
            return result;
        });
    }

    private static void initParams(PreparedStatement statement, Object[] params) throws SQLException {
        for (int i = 0; i < params.length; i++) {
            statement.setObject(1 + i, params[i]);
        }
    }
}
